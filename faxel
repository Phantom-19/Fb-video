#!usr/bin/python3.8
#coding=utf-8

#Auteur: Faxel
#Contact: t.me/Faxelh
# Le credit pour ce code va a Mr Faxel
# Si vous voulez prendre Le credit pour ce code Voyez Faster Axel.

import os,sys,time,datetime,random,hashlib,re,threading,json,requests
from datetime import datetime
from tqdm import tqdm
from time import sleep   
raw_input=input

# -Automatisation-#
def Street(z):
    for e in z + '\n':
        sys.stdout.write(e)
        sys.stdout.flush()
        time.sleep(0.09)
        
try:
	from requests import get, post
	import json, os, subprocess as sp, sys
except Exception as ff:
	exit("\033[1;91m[\033[1;97mErreur provenance des Modules\033[1;91m]\033[1;93m %s"%(ff))
if sys.version[0] in '2':

   exit("\033[1;91m[\033[1;97mDesole\033[1;91m] \033[1;97mVous ne pouvez pas utiliser\033[1;95m python2\033[1;97m.\nVeuillez installer \033[1;96mpython3")


logo = ("""\033[1;91m_______ ______   \033[1;96m _    _ _____ ______  _______  _____ \n\033[1;91m|______ |_____]  \033[1;96m  \  /    |   |     \ |______ |     |\n\033[1;91m|       |_____]  \033[1;96m   \/   __|__ |_____/ |______ |_____|
\t[38;5;214m╔═╗╔═\033[1;97m╗═╗ ╦\033[1;92m╔═╗╦  \t[38;5;214m╠╣ ╠═\033[1;97m╣╔╩╦╝\033[1;92m║╣ ║  \t[38;5;214m╚  ╩ \033[1;97m╩╩ ╚═\033[1;92m╚═╝╩═╝\n\t\t\033[1;91m[[38;5;214mFaxel\033[1;91m]\n\t[38;5;214m🇨🇮\033[1;97mI'm the person whom you can never judge.\033[1;92m 🇨🇮""")

os.system('clear')
Street("""[38;5;214m🇨🇮\033[1;97mI'm the person whom you can never judge.\033[1;92m 🇨🇮
\t[38;5;214m____ __\033[1;97m__ _  _\033[1;92m ____ _    
\t[38;5;214m|___ |_\033[1;97m_|  \/ \033[1;92m |___ |    
\t[38;5;214m|    | \033[1;97m | _/\_\033[1;92m |___ |___  
\033[38;5;214m███████╗██████╗\033[1;97m   ██╗   ██╗██╗██████╗ \033[1;92m███████╗ ██████╗ 
\033[38;5;214m██╔════╝██╔══██╗\033[1;97m  ██║   ██║██║██╔══██╗\033[1;92m██╔════╝██╔═══██╗
\033[38;5;214m█████╗  ██████╔╝\033[1;97m  ██║   ██║██║██║  ██║\033[1;92m█████╗  ██║   ██║
\033[38;5;214m██╔══╝  ██╔══██╗\033[1;97m  ╚██╗ ██╔╝██║██║  ██║\033[1;92m██╔══╝  ██║   ██║
\033[38;5;214m██║     ██████╔╝\033[1;97m   ╚████╔╝ ██║██████╔╝\033[1;92m███████╗╚██████╔╝
\033[38;5;214m╚═╝     ╚═════╝ \033[1;97m    ╚═══╝  ╚═╝╚═════╝ \033[1;92m╚══════╝ ╚═════╝   
""")
raw_input("\033[1;91m[\033[1;97mTaper entrer\033[1;97m]")

os.system('clear')
print(logo)
def menu():
    try:
        if len(list) == 2:
            if 0 in list and 1 in list:
		print("\033[1;97m╔"+27*"═"+1*"═╗")
		print("\033[1;97m║Entrer'[48;5;0;38;5;197mHD'\033[1;97mpour telecharger la video en qualité HD\033[1;97m║")
		print("\033[1;97m║Entrer'[48;5;0;38;5;198mSD'\033[1;97mpour telecharger la video en qualité SD\033[1;97m║")
		print("\033[1;97m╚"+27*"═"+1*"═╝")
		print("\033[1;97m║")
                choix_qualite = str(raw_input("\033[1;97m╚═\033[1;31m▶[38;5;245m Mr [38;5;221mFaxel \033[1;31m▶▶▶ \033[1;33m")).upper()
                
                if choix_qualite=="HD" or choix_qualite=="hd":
                
                    Street("\n\033[1;96mTéléchargement de la vidéo en qualité HD...\033[1;97m\n")
                    video_url = re.search(r'hd_src:"(.+?)"', html).group(1)
                    taille_fichier_demander = requests.get(video_url, stream=True)
                    taille_fichier = int(taille_fichier_demander.headers['Content-Length'])
                    taille_qualite = 1024 
                    temps_fichier = datetime.strftime(datetime.now(), '%Y-%m-%d-%H-%M-%S')
		    #nom_fichier = raw_input("\033[1;97mEntrer un nom pour enregistrer\033[1;91m : \033[1;95m")
                    t=tqdm(total=taille_fichier, unit='B', unit_scale=True, desc=nom_fichier, ascii=True)
                    with open(nom_fichier + '.mp4', 'wb') as f:
                        for data in taille_fichier_demander.iter_content(taille_qualite):
                            t.update(len(data))
                            f.write(data)
                    t.close()
                    print("\n\033[1;92mVidéo téléchargée avec succès.")    

                elif choix_qualite=="SD" or choix_qualite=="sd":
                
                    Street("\n\033[1;96mTéléchargement de la vidéo en qualité SD...\033[1;97m\n")
                    video_url = re.search(r'sd_src:"(.+?)"', html).group(1)
                    taille_fichier_demander = requests.get(video_url, stream=True)
                    taille_fichier = int(taille_fichier_demander.headers['Content-Length'])
                    taille_qualite = 1024 
                    temps_fichier = datetime.strftime(datetime.now(), '%Y-%m-%d-%H-%M-%S')
                    t=tqdm(total=taille_fichier, unit='B', unit_scale=True, desc=nom_fichier, ascii=True)
                    with open(nom_fichier + '.mp4', 'wb') as f:
                        for data in taille_fichier_demander.iter_content(taille_qualite):
                            t.update(len(data))
                            f.write(data)
                    t.close()
                    print("\n\033[1;92mVidéo téléchargée avec succès.")   

        if len(list) == 2:
            if 1 in list and 2 in list:
                print("\033[1;97m╔"+27*"═"+1*"═╗")
		print("\033[1;97m║Oups! La vidéo n'est pas disponible en qualité SD.\033[1;97m║")
		print("\033[1;97m║Souhaitez-vous le télécharger? (o/n).             \033[1;97m║")
		print("\033[1;97m╚"+27*"═"+1*"═╝")
		print("\033[1;97m║")
                renou_qualite = str(raw_input("\033[1;97m╚═\033[1;31m▶[38;5;245m Mr [38;5;221mFaxel \033[1;31m▶▶▶ \033[1;33m")).upper()
         
                if renou_qualite == 'O' or renou_qualite == 'o':
                    Street("\n\033[1;96mTéléchargement de la vidéo en qualité SD...\033[1;97m\n")
                    video_url = re.search(r'sd_src:"(.+?)"', html).group(1)
                    taille_fichier_demander = requests.get(video_url, stream=True)
                    taille_fichier = int(taille_fichier_demander.headers['Content-Length'])
                    taille_qualite = 1024 
                    temps_fichier = datetime.strftime(datetime.now(), '%Y-%m-%d-%H-%M-%S')
                    t=tqdm(total=taille_fichier, unit='B', unit_scale=True, desc=nom_fichier, ascii=True)
                    with open(nom_fichier + '.mp4', 'wb') as f:
                        for data in taille_fichier_demander.iter_content(taille_qualite):
                            t.update(len(data))
                            f.write(data)
                    t.close()
                    print("\n\033[1;92mVidéo téléchargée avec succès.")
                    
                elif renou_qualite == 'n' or renou_qualite == 'N':
                    exit()

        if len(list) == 2:
            if 0 in list and 3 in list:
		print("\033[1;97m╔"+27*"═"+1*"═╗")
		print("\033[1;97m║Oups! La vidéo n'est pas disponible en qualité SD.\033[1;97m║")
		print("\033[1;97m║Souhaitez-vous le télécharger? (o/n).             \033[1;97m║")
		print("\033[1;97m╚"+27*"═"+1*"═╝")
		print("\033[1;97m║")
                renou_qualite = str(raw_input("\033[1;97m╚═\033[1;31m▶[38;5;245m Mr [38;5;221mFaxel \033[1;31m▶▶▶ \033[1;33m")).upper()
         
                if renou_qualite == 'O' or renou_qualite == 'o':
			
                    Street("\n\033[1;96mTéléchargement de la vidéo en qualité HD...\033[1;97m\n")
                    video_url = re.search(r'hd_src:"(.+?)"', html).group(1)
                    taille_fichier_demander = requests.get(video_url, stream=True)
                    taille_fichier = int(taille_fichier_demander.headers['Content-Length'])
                    taille_qualite = 1024 
                    #nom_fichier = datetime.strftime(datetime.now(), '%Y-%m-%d-%H-%M-%S')
                    t=tqdm(total=taille_fichier, unit='B', unit_scale=True, desc=nom_fichier, ascii=True)
                    with open(nom_fichier + '.mp4', 'wb') as f:
                        for data in taille_fichier_demander.iter_content(taille_qualite):
                            t.update(len(data))
                            f.write(data)
                    t.close()
                    print("\n\033[1;92mVidéo téléchargée avec succès.")               
                
                elif renou_qualite == 'n' or renou_qualite == 'N':
                    exit()
    except(KeyboardInterrupt):
        print("\n\033[1;91mProgramme Interrompu")

try:
    while True:
        url = raw_input("\n\033[1;97mEntrez l'URL de la vidéo Facebook\033[1;91m : \033[1;93m")
	nom_fichier = raw_input("\n\033[1;97mEntrer un nom pour enregistrer\033[1;91m : \033[1;95m")
        x = re.match(r'^(https:|)[/][/]www.([^/]+[.])*facebook.com', url)

        if x:
            html = requests.get(url).content.decode('utf-8')
        else:
            print("\n\033[1;91mPas lié au domaine Facebook.")
            exit()

        _qualityhd = re.search('hd_src:"https', html)
        _qualitysd = re.search('sd_src:"https', html)
        _hd = re.search('hd_src:null', html)
        _sd = re.search('sd_src:null', html)

        list = []
        _thelist = [_qualityhd, _qualitysd, _hd, _sd]
        for id,val in enumerate(_thelist):
            if val != None:
                list.append(id)

        menu()
        dmd = raw_input("\n\033[1;97mVoulez vous télécharger une autre vidéo? (o/n)\033[1;91m: \033[1;93m").upper()
        if dmd == str("o") or dmd == str("O"):
            os.system('cls' if os.name == 'nt' else 'clear')
            print(logo)
            continue
        else:
            break

except KeyboardInterrupt:
    print("\n\033[1;91mProgramme Interrompu")
